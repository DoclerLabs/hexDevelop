<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABg8tMgcZT3AiPXCfSnSi/0p0ov9ilsD/gcTs/4zP9P+Mz/T/jM/0/4zP
        9P+Mz/T/jM/0/4zP9P+Mz/T/jM/0/4zP9P+BxOz/YpbA/0p0ov9KdKL/Ij1wnwcZT3AGDy0yAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABxlPYAcZT+cHGU//BxlP/wcZT/8HGU//BxlP/wcZT/8LJFz/SnSi/4HE
        7P+Mz/T/jM/0/3a86f92vOn/jM/0/4zP9P+BxOz/SnSi/wskXP8HGU//BxlP/wcZT/8HGU//BxlP/wcZ
        T/8HGU/nBxlPYAAAAAAAAAAAAAAAAAAAAAAHGU/nBxlP/wcZT/8HGU//BxlP/wcZT/8HGU//BxlP/wcZ
        T/8HGU//IDtu/3Ot1f8+ktL/PpLS/z6S0v8+ktL/c63V/yA7bv8HGU//BxlP/wcZT/8HGU//BxlP/wcZ
        T/8HGU//BxlP/wcZT/8HGU/nAAAAAAAAAAAAAAAAAAAAAAcZT2AHGU//BxlP/wcZT/8HGU//BxlP/wcZ
        T/8HGU//BxlP/wcZT/8HGU//CyRc/12e1v9ebur/Xm7q/12e1v8LJFz/BxlP/wcZT/8HGU//BxlP/wcZ
        T/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT2AAAAAAAAAAAAAAAAAAAAAAAAAAAAcZT78HGU//BxlP/wcZ
        T/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//FQZu/yoA3f8qAN3/FQZu/wcZT/8HGU//BxlP/wcZ
        T/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU+/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQsdIAcZ
        T+cHGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//NT5Z/zU+Wf8HGU//BxlP/wcZ
        T/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//BxlP5wULHSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABg8tMgcZT+cHGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8mNmX/JjZl/wcZ
        T/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT+cGDy0yAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADVynRA0jOCrRZnZ3wskXP8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//BxlP/wcZ
        T/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8LJFz/RZnZ3zSM4Ks1cp0QAAAAAAAA
        AAAAAAAAAAAAAAAAAAA1cp0QRZnZ302o6f9NqOn/drzp/zBckv8HGU//BxlP/wcZT/8HGU//BxlP/wcZ
        T/8HGU//CyRc/wskXP8HGU//BxlP/wcZT/8HGU//BxlP/wcZT/8HGU//MFyS/3a86f9NqOn/Tajp/0WZ
        2d81cp0QAAAAAAAAAAAAAAAAAAAAACmC3HAmf9f/HXDO/yZ/1/+BxOz/jM/0/4HE7P9ilsD/SnSi/0p0
        ov9KdKL/MFyS/yNpq/8ucrX/LnK1/yNpq/8wXJL/SnSi/0p0ov9KdKL/YpbA/4HE7P+Mz/T/gcTs/yZ/
        1/8dcM7/Jn/X/ymC3HAAAAAAAAAAAAAAAAAAAAAANIzgqyZ/1/8tiN79FF+//4zP9P+Mz/T/jM/0/4zP
        9P9dntb/XZ7W/4HE7P83gcL/cLXj/4zP9P+Mz/T/cLXj/zeBwv+BxOz/XZ7W/12e1v+Mz/T/jM/0/4zP
        9P+Mz/T/FF+//y2I3v0tiN79NIzgqwAAAAAAAAAAAAAAAAAAAAAccdaIHXDO/x1wzv8dcM7/jM/0/4zP
        9P+Mz/T/jM/0/4zP9P9wteP/N4HC/yNpq/9wteP/jM/0/4zP9P9wteP/I2mr/zeBwv9wteP/jM/0/4zP
        9P+Mz/T/jM/0/4zP9P8dcM7/Jn/X/y2I3v0ccdaIAAAAAAAAAAAAAAAAAAAAADiV4ygdcM7/HXDO/0mj
        5v92vOn/drzp/12e1v83gcL/bq/d/3a86f9wteP/I2mr/12e1v92vOn/drzp/12e1v8jaav/cLXj/3a8
        6f9ur93/N4HC/12e1v92vOn/drzp/0mj5v8tiN79LYje/TiV4ygAAAAAAAAAAAAAAAAAAAAAAAAAADuY
        5GAtiN79Tajp/zeBwv83gcL/N4HC/y5ytf8WUpr/DkWP/xZSmv8ORY//N4HC/zeBwv83gcL/N4HC/w5F
        j/8WUpr/DkWP/xZSmv8ucrX/N4HC/zeBwv83gcL/Tajp/02o6e87mORgAAAAAAAAAAAAAAAAAAAAAAAA
        AAAFBQWcBQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQV6AAAAAAAA
        AAAAAAAAAAAAAAUFBd8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wYF
        Cs8AAAAAAAAAAAAAAAAFCx0gBQUFvwUFBb8FBQW/BgUKzw0EOf8NBDn/DQQ5/w0EOf8NBDn/DQQ5/w0E
        Of8NBDn/CgQg/xUGbv8VBm7/CgQg/w0EOf8NBDn/DQQ5/w0EOf8NBDn/DQQ5/w0EOf8NBDn/BgUKzwUF
        Bb8FBQW/BQUFvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAN14KgDd/yoA3f8qAN3/KgDd/yoA
        3f8qAN3/KgDd/xUGbv8mAMj/IwG1/yYAyP8mAMj/FQZu/yoA3f8qAN3/KgDd/yoA3f8qAN3/KgDd/yoA
        3f8qAN14AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoA3Z8qAN3/KgDd/yoA
        3f8qAN3/KgDd/yoA3f8hAaf/IwG1/yYAyP8jAbX/JgDI/yoA3f8hAaf/IQGn/yoA3f8qAN3/KgDd/yoA
        3f8qAN3/KgDd/yoA3Z8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgDdvyoA
        3f8qAN3/KgDd/yoA3f8qAN3/KgDd/xUGbv8qAN3/KgDd/w0EOf8NBDn/KgDd/yoA3f8aAn//KgDd/yoA
        3f8qAN3/KgDd/yoA3f8qAN3/KgDdvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAqAN3/KgDd/yoA3f8qAN3/KgDd/yoA3f8qAN3/IQGn/yMBtf8mAMj/JgDI/yYAyP8qAN3/IwG1/yEB
        p/8qAN3/KgDd/yoA3f8qAN3/KgDd/yoA3f8qAN3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABQsdIAUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/EQNJ/yYAyP8mAMj/JgDI/yYA
        yP8RA0n/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FCx0gAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAFBQVVBQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/CgQg/xUG
        bv8VBm7/CgQg/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wYPLTIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBXoFBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUFegAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQUFrwUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQWvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBQrPBQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wYFCs8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgUKzwUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQWcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGDy0yBQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUFnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAFBQVVBQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBXoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1cp0QBQUFnAUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBa8GDy0yAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANXKdEAUFBVUFBQWcBQUFvwUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQXfBQUFrwUFBXoFCx0gAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA8AAAD8AAAAPAAAADwAAAA+AAAAfgAAAH8AAAD+AAAAfAAAADwAAAA8AA
        AAPAAAADwAAAA+AAAAfAAAADwAAAA4AAAAP4AAAf+AAAH/gAAB/4AAAf8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAB/4AAA//AAAf/8AAf8=
</value>
  </data>
</root>